{
  "swagger": "2.0",
  "info": {
    "version": "2017-03-01-preview",
    "title": "SqlManagementClient",
    "description": "The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities."
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/auditingSettings/{blobAuditingPolicyName}": {
      "get": {
        "tags": [
          "ServerBlobAuditing"
        ],
        "description": "Gets a server's blob auditing policy.",
        "operationId": "ServerBlobAuditingPolicies_Get",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "name": "serverName",
            "in": "path",
            "description": "The name of the server for which the blob audit policy is defined.",
            "required": true,
            "type": "string"
          },
          {
            "name": "blobAuditingPolicyName",
            "in": "path",
            "description": "The name of the blob auditing policy.",
            "required": true,
            "type": "string",
            "enum": [
              "Default"
            ],
            "x-ms-enum": {
              "name": "BlobAuditingPolicyName",
              "modelAsString": true
            }
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the server blob auditing policy.",
            "schema": {
              "$ref": "#/definitions/ServerBlobAuditingPolicy"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 InvalidServerBlobAuditingPolicyCreateRequest - The create server blob auditing policy request does not exist or has no properties object.\n\n * 400 InvalidBlobAuditActionsAndGroups - Invalid audit actions or action groups.\n\n * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.\n\n * 400 BlobAuditingInvalidStorageAccountName - The provided storage account is not valid or does not exist.\n\n * 400 BlobAuditingInvalidStorageAccountCredentials - The provided storage account access key is not valid.\n\n * 404 SubscriptionDoesNotHaveServer - The requested server was not found\n\n * 405 ServerBlobAuditingPolicyNotImplemented - Operations on Server Auditing settings are not enabled yet\n\n * 500 GetBlobAuditingPolicyFailed - Failed to get Auditing settings"
          }
        },
        "x-ms-examples": {
          "Get a server's blob auditing policy": {
            "$ref": "./examples/ServerBlobAuditingGet.json"
          }
        }
      },
      "put": {
        "tags": [
          "ServerBlobAuditing"
        ],
        "description": "Creates or updates a server's blob auditing policy.",
        "operationId": "ServerBlobAuditingPolicies_CreateOrUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupParameter"
          },
          {
            "name": "serverName",
            "in": "path",
            "description": "The name of the server for which the blob audit policy will be defined.",
            "required": true,
            "type": "string"
          },
          {
            "name": "blobAuditingPolicyName",
            "in": "path",
            "description": "The name of the blob auditing policy.",
            "required": true,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServerBlobAuditingPolicy"
            }
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the auditing settings.",
            "schema": {
              "$ref": "#/definitions/ServerBlobAuditingPolicy"
            }
          },
          "default": {
            "description": "*** Error Responses: ***\n\n * 400 InvalidServerBlobAuditingPolicyCreateRequest - The create server blob auditing policy request does not exist or has no properties object.\n\n * 400 InvalidBlobAuditActionsAndGroups - Invalid audit actions or action groups.\n\n * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.\n\n * 400 BlobAuditingInvalidStorageAccountName - The provided storage account is not valid or does not exist.\n\n * 400 BlobAuditingInvalidStorageAccountCredentials - The provided storage account access key is not valid.\n\n * 404 SubscriptionDoesNotHaveServer - The requested server was not found\n\n * 405 ServerBlobAuditingPolicyNotImplemented - Operations on Server Auditing settings are not enabled yet\n\n * 500 UpsertBlobAuditingPolicyFailed - An error has occurred while saving Auditing settings, please try again later"
          },
          "202": {
            "description": "Updating the auditing settings is in progress."
          }
        },
        "x-ms-examples": {
          "Update a server's blob auditing policy with all parameters": {
            "$ref": "./examples/ServerBlobAuditingCreateMax.json"
          },
          "Update a server's blob auditing policy with minimal parameters": {
            "$ref": "./examples/ServerBlobAuditingCreateMin.json"
          }
        }
      }
    }
  },
  "definitions": {
    "ServerBlobAuditingPolicyProperties": {
      "description": "Properties of a server blob auditing policy.",
      "required": [
        "state"
      ],
      "type": "object",
      "properties": {
        "state": {
          "description": "Specifies the state of the policy. If state is Enabled, storageEndpoint and storageAccountAccessKey are required.",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "BlobAuditingPolicyState",
            "modelAsString": false
          }
        },
        "storageEndpoint": {
          "description": "Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint is required.",
          "type": "string"
        },
        "storageAccountAccessKey": {
          "description": "Specifies the identifier key of the auditing storage account. If state is Enabled, storageAccountAccessKey is required.",
          "type": "string",
          "x-ms-mutability": [
            "create",
            "update"
          ]
        },
        "retentionDays": {
          "format": "int32",
          "description": "Specifies the number of days to keep in the audit logs.",
          "type": "integer"
        },
        "auditActionsAndGroups": {
          "description": "Specifies the Actions and Actions-Groups to audit.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "storageAccountSubscriptionId": {
          "format": "uuid",
          "description": "Specifies the blob storage subscription Id.",
          "type": "string"
        },
        "isStorageSecondaryKeyInUse": {
          "description": "Specifies whether storageAccountAccessKey value is the storage’s secondary key.",
          "type": "boolean"
        }
      }
    },
    "Resource": {
      "description": "ARM resource.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Resource ID.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Resource name.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Resource type.",
          "type": "string",
          "readOnly": true
        }
      },
      "x-ms-azure-resource": true
    },
    "ProxyResource": {
      "description": "ARM proxy resource.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {}
    },
    "ServerBlobAuditingPolicy": {
      "description": "A server blob auditing policy.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProxyResource"
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/ServerBlobAuditingPolicyProperties",
          "description": "Resource properties.",
          "x-ms-client-flatten": true
        }
      }
    }
  },
  "parameters": {
    "SubscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "description": "The subscription ID that identifies an Azure subscription.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "client"
    },
    "ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for the request.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "client"
    },
    "ResourceGroupParameter": {
      "name": "resourceGroupName",
      "in": "path",
      "description": "The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "ServerNameParameter": {
      "name": "serverName",
      "in": "path",
      "description": "The name of the server.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "DatabaseNameParameter": {
      "name": "databaseName",
      "in": "path",
      "description": "The name of the database.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  },
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  }
}