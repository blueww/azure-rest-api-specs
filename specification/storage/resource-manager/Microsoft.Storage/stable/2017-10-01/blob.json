{
 "swagger": "2.0",
 "info": {
  "version": "2017-10-01",
  "x-ms-code-generation-settings": {
   "name": "StorageManagementClient"
  },
  "title": "StorageManagement",
  "description": "The Azure Storage Management API."
 },
 "host": "management.azure.com",
 "schemes": [
  "https"
 ],
 "consumes": [
   "application/json"
 ],
 "produces": [
   "application/json"
 ],
 "paths": {
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default": {
   "put": {
    "tags": [
     "BlobService"
    ],
    "operationId": "BlobService_SetServiceProperties",
    "description": "Sets the properties of a storage account’s Blob service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules. ",
    "parameters": [
     {
      "$ref": "#/parameters/ResourceGroupName"
     },
     {
      "$ref": "#/parameters/AccountName"
     },
     {
      "name": "parameters",
      "in": "body",
      "required": true,
      "schema": {
       "$ref": "#/definitions/BlobServiceProperties"
      },
      "description": "The properties of a storage account’s Blob service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules."
     },
     {
      "$ref": "#/parameters/ApiVersionParameter"
     },
     {
      "$ref": "#/parameters/SubscriptionIdParameter"
     }
    ],
    "responses": {
     "200": {
      "description": "OK -- Sets The properties of a storage account’s Blob service successfully."
     }
    }
   },
   "get": {
    "tags": [
     "BlobService"
    ],
    "operationId": "BlobService_GetServiceProperties",
    "description": "Gets the properties of a storage account’s Blob service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.",
    "parameters": [
     {
      "$ref": "#/parameters/ResourceGroupName"
     },
     {
      "$ref": "#/parameters/AccountName"
     },
     {
      "$ref": "#/parameters/ApiVersionParameter"
     },
     {
      "$ref": "#/parameters/SubscriptionIdParameter"
     }
    ],
    "responses": {
     "200": {
      "description": "OK -- returned the properties of a storage account’s Blob service.",
      "schema": {
       "$ref": "#/definitions/BlobServiceProperties"
      }
     }
    }
   }
  },
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers": {
   "get": {
    "tags": [
     "BlobContainers"
    ],
    "operationId": "BlobContainers_List",
    "x-ms-examples": {
      "ListContainers": { "$ref": "./examples/BlobContainersList.json" }
    },
    "description": "Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.",
    "parameters": [
     {
      "$ref": "#/parameters/ResourceGroupName"
     },
     {
      "$ref": "#/parameters/AccountName"
     },
     {
      "$ref": "#/parameters/ApiVersionParameter"
     },
     {
      "$ref": "#/parameters/SubscriptionIdParameter"
     }
    ],
    "responses": {
     "200": {
      "description": "OK -- List Container operation completed successfully.",
      "schema": {
       "$ref": "#/definitions/ListContainerItems"
      }
     }
    }
   }
  },
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}": {
   "put": {
    "tags": [
     "BlobContainers"
    ],
    "operationId": "BlobContainers_Create",
    "x-ms-examples": {
      "PutContainers": { "$ref": "./examples/BlobContainersPut.json" }
    },
    "description": "Creates a new container under the specified account as described by request body. The container resource includes metadata and properties for that container. It does not include a list of the blobs contained by the container. ",
    "parameters": [
     {
      "$ref": "#/parameters/ResourceGroupName"
     },
     {
      "$ref": "#/parameters/AccountName"
     },
     {
      "$ref": "#/parameters/ContainerName"
     },
     {
      "name": "blobContainer",
      "in": "body",
      "required": true,
      "schema": {
       "$ref": "#/definitions/BlobContainer"
      },
      "description": "Properties of the blob container to create."
     },
     {
      "$ref": "#/parameters/ApiVersionParameter"
     },
     {
      "$ref": "#/parameters/SubscriptionIdParameter"
     }
    ],
    "responses": {
     "200": {
      "description": "OK -- Create Container operation completed successfully.",
      "schema": {
       "$ref": "#/definitions/BlobContainer"
      }
     }
    }
   },
   "patch": {
    "tags": [
     "BlobContainers"
    ],
    "operationId": "BlobContainers_Update",
    "x-ms-examples": {
      "PatchContainers": { "$ref": "./examples/BlobContainersPatch.json" }
    },
    "description": "Updates container properties as specified in request body. Properties not mentioned in the request will be unchanged. Update fails if the specified container doesn't already exist. ",
    "parameters": [
     {
      "$ref": "#/parameters/ResourceGroupName"
     },
     {
      "$ref": "#/parameters/AccountName"
     },
     {
      "$ref": "#/parameters/ContainerName"
     },
     {
      "name": "blobContainer",
      "in": "body",
      "required": true,
      "schema": {
       "$ref": "#/definitions/BlobContainer"
      },
      "description": "Properties to update for the blob container."
     },
     {
      "$ref": "#/parameters/ApiVersionParameter"
     },
     {
      "$ref": "#/parameters/SubscriptionIdParameter"
     }
    ],
    "responses": {
     "200": {
      "description": "OK -- Update Container operation completed successfully.",
      "schema": {
       "$ref": "#/definitions/BlobContainer",
       "description": "Properties of the updated blob container."
      }
     }
    }
   },
   "get": {
    "tags": [
     "BlobContainers"
    ],
    "operationId": "BlobContainers_Get",
    "description": "Gets properties of a specified container. ",
    "parameters": [
     {
      "$ref": "#/parameters/ResourceGroupName"
     },
     {
      "$ref": "#/parameters/AccountName"
     },
     {
      "$ref": "#/parameters/ContainerName"
     },
     {
      "$ref": "#/parameters/ApiVersionParameter"
     },
     {
      "$ref": "#/parameters/SubscriptionIdParameter"
     }
    ],
    "responses": {
     "200": {
      "description": "OK -- Get Container operation completed successfully.",
      "schema": {
       "$ref": "#/definitions/BlobContainer"
      }
     }
    }
   },
   "delete": {
    "tags": [
     "BlobContainers"
    ],
    "operationId": "BlobContainers_Delete",
    "description": "Deletes specified container under its account.",
    "parameters": [
     {
      "$ref": "#/parameters/ResourceGroupName"
     },
     {
      "$ref": "#/parameters/AccountName"
     },
     {
      "$ref": "#/parameters/ContainerName"
     },
     {
      "$ref": "#/parameters/ApiVersionParameter"
     },
     {
      "$ref": "#/parameters/SubscriptionIdParameter"
     }
    ],
    "responses": {
     "200": {
      "description": "OK -- Delete Container operation completed successfully."
     }
    }
   }
  },
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/lease": {
   "post": {
    "tags": [
     "BlobContainers"
    ],
    "operationId": "BlobContainers_Lease",
    "description": "Establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite.",
    "parameters": [
     {
      "$ref": "#/parameters/ResourceGroupName"
     },
     {
      "$ref": "#/parameters/AccountName"
     },
     {
      "$ref": "#/parameters/ContainerName"
     },
     {
      "$ref": "#/parameters/ApiVersionParameter"
     },
     {
      "$ref": "#/parameters/SubscriptionIdParameter"
     }
    ],
    "responses": {
     "200": {
      "description": "OK -- Lease Container operation completed successfully."
     }
    }
   }
  },
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/setLegalHold": {
   "post": {
    "tags": [
     "BlobContainers"
    ],
    "operationId": "BlobContainers_SetLegalHold",
    "description": "Sets legal hold tags. Setting the same tag results in an idempotent operation. SetLegalHold follows an append pattern and does not clear out the existing tags that are not specified in the request.",
    "parameters": [
     {
      "$ref": "#/parameters/ResourceGroupName"
     },
     {
      "$ref": "#/parameters/AccountName"
     },
     {
      "$ref": "#/parameters/ContainerName"
     },
     {
      "$ref": "#/parameters/ApiVersionParameter"
     },
     {
      "$ref": "#/parameters/SubscriptionIdParameter"
     },
     {
      "name": "LegalHold",
      "in": "body",
      "required": true,
      "schema": {
       "$ref": "#/definitions/LegalHold"
      }
     }
    ],
    "responses": {
     "200": {
      "description": "OK -- Sets legal hold tags for Container completed successfully.",
      "schema": {
       "$ref": "#/definitions/LegalHold"
      }
     }
    }
   }
  },
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/clearLegalHold": {
   "post": {
    "tags": [
     "BlobContainers"
    ],
    "operationId": "BlobContainers_ClearLegalHold",
    "description": "Clears legal hold tags. Clearing the same or non-existent tag results in an idempotent operation. ClearLegalHold clears out only the specified tags in the request.",
    "parameters": [
     {
      "$ref": "#/parameters/ResourceGroupName"
     },
     {
      "$ref": "#/parameters/AccountName"
     },
     {
      "$ref": "#/parameters/ContainerName"
     },
     {
      "$ref": "#/parameters/ApiVersionParameter"
     },
     {
      "$ref": "#/parameters/SubscriptionIdParameter"
     },
     {
      "name": "LegalHold",
      "in": "body",
      "required": true,
      "schema": {
       "$ref": "#/definitions/LegalHold"
      },
      "description": "TODO"
     }
    ],
    "responses": {
     "200": {
      "description": "OK -- TODO.",
      "schema": {
       "$ref": "#/definitions/LegalHold"
      }
     }
    }
   }
  },
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default": {
   "put": {
    "tags": [
     "BlobContainers"
    ],
    "operationId": "BlobContainers_CreateOrUpdateImmutabilityPolicy",
    "description": "Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation.",
    "parameters": [
     {
      "$ref": "#/parameters/ResourceGroupName"
     },
     {
      "$ref": "#/parameters/AccountName"
     },
     {
      "$ref": "#/parameters/ContainerName"
     },
     {
      "$ref": "#/parameters/ApiVersionParameter"
     },
     {
      "$ref": "#/parameters/SubscriptionIdParameter"
     },
     {
      "name": "parameters",
      "in": "body",
      "schema": {
       "$ref": "#/definitions/ImmutabilityPolicy"
      },
      "description": "TODO"
     },
     {
      "name": "If-Match",
      "in": "header",
      "required": false,
      "type": "string",
      "description": "The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied."
     }
    ],
    "responses": {
     "200": {
      "description": "OK -- TODO.",
      "schema": {
       "$ref": "#/definitions/ImmutabilityPolicy"
      },
      "headers": {
       "ETag": {
        "description": "The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers.",
        "type": "string"
       }
      }
     }
    }
   },
   "get": {
    "tags": [
     "BlobContainers"
    ],
    "operationId": "BlobContainers_GetImmutabilityPolicy",
    "description": "Gets the existing immutability policy along with the corresponding ETag in response headers and body.",
    "parameters": [
     {
      "$ref": "#/parameters/ResourceGroupName"
     },
     {
      "$ref": "#/parameters/AccountName"
     },
     {
      "$ref": "#/parameters/ContainerName"
     },
     {
      "$ref": "#/parameters/ApiVersionParameter"
     },
     {
      "$ref": "#/parameters/SubscriptionIdParameter"
     },
     {
      "name": "If-Match",
      "in": "header",
      "required": false,
      "type": "string",
      "description": "The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied."
     }
    ],
    "responses": {
     "200": {
      "description": "OK -- TODO.",
      "schema": {
       "$ref": "#/definitions/ImmutabilityPolicy"
      },
      "headers": {
       "ETag": {
        "description": "The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers.",
        "type": "string"
       }
      }
     }
    }
   },
   "delete": {
    "tags": [
     "BlobContainers"
    ],
    "operationId": "BlobContainers_DeleteImmutabilityPolicy",
    "description": "Aborts an unlocked immutability policy. The response of delete has ImmutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation. Deleting a locked immutability policy is not allowed, only way is to delete the container after deleting all blobs inside the container.",
    "parameters": [
     {
      "$ref": "#/parameters/ResourceGroupName"
     },
     {
      "$ref": "#/parameters/AccountName"
     },
     {
      "$ref": "#/parameters/ContainerName"
     },
     {
      "$ref": "#/parameters/ApiVersionParameter"
     },
     {
      "$ref": "#/parameters/SubscriptionIdParameter"
     },
     {
      "name": "If-Match",
      "in": "header",
      "required": true,
      "type": "string",
      "description": "The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied."
     }
    ],
    "responses": {
     "200": {
      "description": "OK -- TODO.",
      "schema": {
       "$ref": "#/definitions/ImmutabilityPolicy"
      },
      "headers": {
       "ETag": {
        "description": "The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers.",
        "type": "string"
       }
      }
     }
    }
   }
  },
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/lock": {
   "post": {
    "tags": [
     "BlobContainers"
    ],
    "operationId": "BlobContainers_LockImmutabilityPolicy",
    "description": "Sets the ImmutabilityPolicy to Locked state. The only action allowed on a Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is required for this operation.",
    "parameters": [
     {
      "$ref": "#/parameters/ResourceGroupName"
     },
     {
      "$ref": "#/parameters/AccountName"
     },
     {
      "$ref": "#/parameters/ContainerName"
     },
     {
      "$ref": "#/parameters/ApiVersionParameter"
     },
     {
      "$ref": "#/parameters/SubscriptionIdParameter"
     },
     {
      "name": "If-Match",
      "in": "header",
      "required": true,
      "type": "string",
      "description": "The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied."
     }
    ],
    "responses": {
     "200": {
      "description": "OK -- TODO.",
      "schema": {
       "$ref": "#/definitions/ImmutabilityPolicy"
      },
      "headers": {
       "ETag": {
        "description": "The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers.",
        "type": "string"
       }
      }
     }
    }
   }
  },
  "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/extend": {
   "post": {
    "tags": [
     "BlobContainers"
    ],
    "operationId": "BlobContainers_ExtendImmutabilityPolicy",
    "description": "Extends the ImmutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. The only action allowed on a Locked policy will be this action. ETag in If-Match is required for this operation.",
    "parameters": [
     {
      "$ref": "#/parameters/ResourceGroupName"
     },
     {
      "$ref": "#/parameters/AccountName"
     },
     {
      "$ref": "#/parameters/ContainerName"
     },
     {
      "$ref": "#/parameters/ApiVersionParameter"
     },
     {
      "$ref": "#/parameters/SubscriptionIdParameter"
     },
     {
      "name": "parameters",
      "in": "body",
      "schema": {
       "$ref": "#/definitions/ImmutabilityPolicy"
      },
      "description": "TODO"
     },
     {
      "name": "If-Match",
      "in": "header",
      "required": true,
      "type": "string",
      "description": "The entity state (ETag) version of the immutability policy to update. A value of \"*\" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied."
     }
    ],
    "responses": {
     "200": {
      "description": "OK -- TODO.",
      "schema": {
       "$ref": "#/definitions/ImmutabilityPolicy"
      },
      "headers": {
       "ETag": {
        "description": "The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers.",
        "type": "string"
       }
      }
     }
    }
   }
  }
 },
 "definitions": {
  "BlobServiceProperties": {
   "properties": {
    "properties": {
     "properties": {
      "Cors": {
       "$ref": "#/definitions/CorsRule",
       "description": "Specifies a CORS rule for the Blob service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Blob service."
      },
      "DefaultServiceVersion": {
       "type": "string",
       "description": "DefaultServiceVersion indicates the default version to use for requests to the Blob service if an incoming request’s version is not specified. Possible values include version 2008-10-27 and all more recent versions."
      }
     },
     "x-ms-client-flatten": true,
     "x-ms-client-name": "BlobServiceProperties",
     "description": "The properties of a storage account’s Blob service."
    }
   },
   "allOf": [
    {
     "$ref": "#/definitions/BlobResource"
    }
   ],
   "description": "The properties of a storage account’s Blob service."
  },
  "CorsRule": {
   "properties": {
    "allowedOrigins": {
     "type": "array",
     "items": {
      "type": "string"
     },
     "description": "Required if CorsRule element is present. A list of origin domains that will be allowed via CORS, or \"*\" to allow all domains"
    },
    "allowedMethods": {
     "type": "string",
     "enum": [
      "DELETE",
      "GET",
      "HEAD",
      "MERGE",
      "POST",
      "OPTIONS",
      "PUT"
     ],
     "x-ms-enum": {
      "name": "HTTPMethod",
      "modelAsString": false
     },
     "description": "Required if CorsRule element is present. A list of HTTP methods that are allowed to be executed by the origin."
    },
    "maxAgeInSeconds": {
     "type": "integer",
     "description": "Required if CorsRule element is present. The number of seconds that the client/browser should cache a preflight response."
    },
    "exposedHeaders": {
     "type": "array",
     "items": {
      "type": "string"
     },
     "description": "Required if CorsRule element is present. A list of response headers to expose to CORS clients."
    },
    "allowedHeaders": {
     "type": "array",
     "items": {
      "type": "string"
     },
     "description": "Required if CorsRule element is present. A list of headers allowed to be part of the cross-origin request."
    }
   },
   "description": "Specifies a CORS rule for the Blob service."
  },
  "ContainerProperties": {
   "properties": {
    "publicAccess": {
     "type": "string",
     "enum": [
      "container",
      "blob",
      "none"
     ],
     "x-ms-enum": {
      "name": "PublicAccess",
      "modelAsString": false
     },
     "description": "TODO"
    },
    "lastModifiedTime": {
     "type": "string",
     "format": "date-time",
     "readOnly": true
    },
    "leaseStatus": {
     "type": "string",
     "readOnly": true,
     "enum": [
      "locked",
      "unlocked"
     ],
     "x-ms-enum": {
      "name": "LeaseStatus",
      "modelAsString": false
     },
     "description": "TODO"
    },
    "leaseState": {
     "type": "string",
     "readOnly": true,
     "enum": [
      "available",
      "leased",
      "expired",
      "breaking",
      "broken"
     ],
     "x-ms-enum": {
      "name": "LeaseState",
      "modelAsString": false
     },
     "description": "TODO"
    },
    "leaseDuration": {
     "type": "string",
     "readOnly": true,
     "enum": [
      "infinite",
      "fixed"
     ],
     "x-ms-enum": {
      "name": "LeaseDuration",
      "modelAsString": false
     },
     "description": "TODO"
    },
    "metadata": {
     "type": "object",
     "additionalProperties": {
      "type": "string"
     },
     "description": "TODO"
    },
    "immutabilityPolicy": {
     "readOnly": true,
     "$ref": "#/definitions/ImmutabilityPolicyProperties",
     "x-ms-client-name": "ImmutabilityPolicy",
     "description": "TODO"
    },
    "legalHold": {
     "readOnly": true,
     "$ref": "#/definitions/LegalHold",
     "description": "TODO"
    }
   },
   "description": "TODO"
  },
  "BlobContainer": {
   "properties": {
    "properties": {
     "$ref": "#/definitions/ContainerProperties",
     "x-ms-client-flatten": true,
     "x-ms-client-name": "ContainerProperties",
     "description": "TODO"
    }
   },
   "allOf": [
    {
     "$ref": "#/definitions/BlobResourceWithEtag"
    }
   ],
   "description": "Properties of the blob container."
  },
  "ImmutabilityPolicyProperty": {
   "properties": {
    "immutabilityPeriodSinceCreationInDays": {
     "type": "integer",
     "description": "TODO"
    },
    "state": {
     "type": "string",
     "readOnly": true,
     "enum": [
      "Locked",
      "Unlocked"
     ],
     "x-ms-enum": {
      "name": "ImmutabilityPolicyState",
      "modelAsString": false
     },
     "description": "The proeprties of an ImmutabilityPolicy of a blob container."
    }
   },
   "required": [
    "ImmutabilityPeriodSinceCreationInDays"
   ],
   "description": "ImmutabilityPolicy"
  },
  "ImmutabilityPolicyProperties": {
   "properties": {
    "properties": {
     "$ref": "#/definitions/ImmutabilityPolicyProperty",
     "x-ms-client-flatten": true
    }
   },
   "description": "TODO"
  },
  "ImmutabilityPolicy": {
   "properties": {
    "properties": {
     "$ref": "#/definitions/ImmutabilityPolicyProperty",
     "x-ms-client-flatten": true
    }
   },
   "allOf": [
    {
     "$ref": "#/definitions/BlobResourceWithEtag"
    }
   ],
   "required": [
    "properties"
   ],
   "description": "The ImmutabilityPolicy property of a blob container."
  },
  "LegalHold": {
   "properties": {
    "hasLegalHold": {
     "type": "boolean",
     "readOnly": true,
     "description": "The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account."
    },
    "tags": {
     "type": "array",
     "items": {
      "type": "string"
     },
     "description": "Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case at SRP."
    }
   },
   "description": "The LegalHold property of a blob container."
  },
  "ListContainerItem": {
   "properties": {
    "properties": {
     "$ref": "#/definitions/ContainerProperties",
     "x-ms-client-flatten": true
    }
   },
   "allOf": [
    {
     "$ref": "#/definitions/BlobResourceWithEtag"
    }
   ],
   "description": "TODO"
  },
  "ListContainerItems": {
   "properties": {
    "value": {
     "type": "array",
     "items": {
      "$ref": "#/definitions/ListContainerItem"
     },
     "description": "TODO"
    }
   },
   "description": "TODO"
  },
  "BlobResource": {
   "properties": {
    "id": {
     "readOnly": true,
     "type": "string",
     "description": "Resource Id"
    },
    "name": {
     "readOnly": true,
     "type": "string",
     "description": "Resource name"
    },
    "type": {
     "readOnly": true,
     "type": "string",
     "description": "Resource type"
    }
   },
   "x-ms-azure-resource": true,
   "description": "Describes a storage resource."
  },
  "BlobResourceWithEtag": {
   "properties": {
    "id": {
     "readOnly": true,
     "type": "string",
     "description": "Resource Id"
    },
    "name": {
     "readOnly": true,
     "type": "string",
     "description": "Resource name"
    },
    "type": {
     "readOnly": true,
     "type": "string",
     "description": "Resource type"
    },
    "etag": {
     "type": "string",
     "readOnly": true
    }
   },
   "x-ms-azure-resource": true,
   "description": "Describes a storage resource."
  }
 },
 "parameters": {
  "SubscriptionIdParameter": {
   "name": "subscriptionId",
   "in": "path",
   "required": true,
   "type": "string",
   "description": "Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call."
  },
  "ApiVersionParameter": {
   "name": "api-version",
   "in": "query",
   "required": true,
   "type": "string",
   "description": "Client Api Version."
  },
  "ResourceGroupName": {
   "name": "resourceGroupName",
   "in": "path",
   "required": true,
   "type": "string",
   "description": "The name of the resource group within the user's subscription. The name is case insensitive.",
   "pattern": "^[-\\w\\._\\(\\)]+$",
   "minLength": 1,
   "maxLength": 90,
   "x-ms-parameter-location": "method"
  },
  "AccountName": {
   "name": "accountName",
   "in": "path",
   "required": true,
   "type": "string",
   "description": "The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.",
   "maxLength": 24,
   "minLength": 3,
   "x-ms-parameter-location": "method"
  },
  "ContainerName": {
   "name": "containerName",
   "in": "path",
   "required": true,
   "type": "string",
   "description": "The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.",
   "maxLength": 63,
   "minLength": 3,
   "x-ms-parameter-location": "method"
  }
 },
 "securityDefinitions": {
  "azure_auth": {
   "type": "oauth2",
   "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
   "flow": "implicit",
   "description": "Azure Active Directory OAuth2 Flow",
   "scopes": {
    "user_impersonation": "impersonate your user account"
   }
  }
 },
 "security": [
  {
   "azure_auth": [
    "user_impersonation"
   ]
  }
 ]
}